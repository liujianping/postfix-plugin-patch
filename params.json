{"name":"Postfix-plugin-patch","tagline":"plugin patch for support the dict query","body":"Postfix DICT Plugin Howto\r\n\r\nbased on postfix 2.7.2\r\n-------------------------------------------------------------------------------\r\n\r\nIntroduction\r\n\r\nThe Postfix plugin map type allows you to extend dict map type as you like,\r\nand do not patch the postfix source code any more, just implement the plugin interface.\r\n\r\nBuilding Postfix with Http support\r\n\r\nGet postfix source code from:\r\n    http://www.postfix.org/download.html\r\n\r\n    tar xfz postfix-2.x.x.tar.gz\r\n    cd postfix-2.x.x\r\n    patch -p1 -d ./ < ../postfix-2.x.x_with_dict_plugin.patch\r\n\r\nThen you can build Postfix from source code as described in the INSTALL document. \r\n\r\nUsing Plugin map\r\n\r\nOnce Postfix is built with http support, you can specify a map type in main.cf\r\nlike this:\r\n\r\n    virtual_mailbox_maps = plugin:/etc/postfix/plugin_mailbox.cf\r\n\r\nThe file /etc/postfix/mailbox.cf specifies lots of information telling\r\nPostfix how to configure the plugin.\r\n\r\nPlugin Configure Example:\r\n\r\n\t\t@/etc/postfix/plugin_mailbox.cf\r\n\t\t-------------------------------------------------------------------\r\n\t\t1 plugin_name = /etc/postfix/plugins/libmailbox.so\r\n\t\t2 open = name_of_init_fuction_in_plugin\r\n\t\t3 open_arg = param_of_init_fuction_in_plugin\r\n\t\t4 close = name_of_final_fuction_in_plugin\r\n\t\t5 lookup = name_of_lookup_fuction_in_plugin\r\n\t\t6 update = name_of_update_fuction_in_plugin\r\n\t\t7 delete = name_of_delete_fuction_in_plugin\r\n\t\t8 sequence = name_of_sequence_fuction_in_plugin\r\n\r\nline 1: tell the postfix where to dlopen the plugin, \r\n\t\t\t \tof course you can just set the plugin name without absolute path, \r\n\t\t\t \tyou should make sure the plugin in the ld.conf path where dlopen can find\r\n\r\nline 2: name of the plugin to initialize some resource, the item is option\r\nline 3: argument string of the plugin to initialize fuction, the item is option\r\nline 4: name of the plugin to finalize the resource we initialized, the item should be with the initialize option,\r\n\t\t\t\totherwise there may be memory leak problem.\r\n\r\nline 5:\tname of the plugin fuction to lookup a key \r\nline 6:\tname of the plugin fuction to update a key \r\nline 7:\tname of the plugin fuction to delete a key \r\nline 8:\tname of the plugin fuction to sequence <key, value> pair \r\n\r\nif line 5 - 8, some or all items not defined, plugin will use the default dict method(which implemention is not support).\r\nand line 2 - 3, all are optional. But you should be attention, when you create a resource, you should release it.\r\n\r\nPlugin Map Program Guide:\r\n\r\n1. phototypes of the plugin interface\r\n\t1) open phototype:\r\n\tdefinition:\r\n\tvoid* (*open)(const char* arg);\r\n\tdescription:\r\n\t@Usage: create a resource obj of the plugin, will used by the other fuctions.\r\n\t@Param: init_param, we can define something useful when create the resource. \r\n\tand the init_param will be readed from the plugin configure file, reference to [Plugin Configure Example: line 3]\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\r\n\t@Result: return the resoure object ptr, \r\n\t  Null, means create the resource object failed\r\n\t  Not Null, means ok.\r\n\t\r\n\t2) close phototype:\r\n\tdefinition:\r\n\tvoid (*close)(void* res);\r\n\tdescription:\r\n\t@Usage: destroy a resource obj\r\n\t@Param: res, created by open fuction.\r\n\t\r\n\t3) lookup phototype:\r\n\tdefinition:\r\n\tconst char* (*lookup)(void* res, const char* key);\r\n\tdescription:\r\n\t@Usage: lookup the value of the dest key\r\n\t@Param: res, created by open fuction.\r\n\tkey, postfix provide the param when invoke the fuction\r\n\t@Result:\r\n\tvalue of the type const char*;\r\n\tNull, means not find.\r\n\tNot Null, finded.\r\n\t\r\n\t4) update phototype:\r\n\tdefinition:\r\n\tint (*update)(void* res, const char* key, const char* value);\r\n\tdescription:\r\n\t@Usage: update the value of the dest key with the dest value\r\n\t@Param: res, created by open fuction.\r\n\tkey, postfix provide the dest key when invoke the fuction\r\n\tvalue, postfix provide the dest value when invoke the fuction\r\n\t@Result:\r\n\t-1, fuction failed\r\n\t0, fuction succeed with no key update\r\n\t1, fuction succeed with one key update\r\n\t\r\n\t5) delete phototype:\r\n\tdefinition:\r\n\tvoid* (*delete)(void* res, const char* key);\r\n\tdescription:\r\n\t@Usage: delete the the dest key pair \r\n\t@Param: res, created by open fuction.\r\n\tkey, postfix provide the dest key when invoke the fuction\r\n\t@Result:\r\n\t-1, fuction failed\r\n\t0, fuction succeed with no key deleted\r\n\t1, fuction succeed with one key deleted\r\n\t\r\n\t6) sequence phototype:\r\n\tdefinition:\r\n\tvoid* (*sequence)(void* res, int i, const char ** key, const char **value);\r\n\tdescription:\r\n\tthis interface just for the dict sequence interface, many inherit dict map doesnt support the function.\r\n\tif you want to implement the interface, just make sure you know more detail enough. \r\n\tyou can reference to the postfix/src/util/dict.h file.\r\n \t\t\t\r\n\t \r\n2. implemetion your plugin.\r\n\t :)\r\n\t\t\r\nCredits\r\n\r\n    JianPing Liu\r\n    1151703234@qq.com  \r\n    Shanghai, PRC \r\n    \r\n    This project: \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}